// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
/** @typedef { import('./types').SchemaTables } SchemaTables */
/** @type { SchemaTables } */
const tables = [
  {
    name: "Answer",
    columns: [
      {
        name: "comment",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "question_id",
        type: "link",
        link: { table: "Question" },
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "survey_id",
        type: "link",
        link: { table: "Survey" },
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "type",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Assigns",
    columns: [
      {
        name: "datetime",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "quote_id",
        type: "link",
        link: { table: "Quote" },
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "User" },
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Chooses",
    columns: [
      {
        name: "datetime",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "User" },
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "welcome_mood_id",
        type: "link",
        link: { table: "WelcomeMood" },
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Question",
    columns: [
      {
        name: "question_id",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "text",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Quote",
    columns: [
      {
        name: "author",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "'null'::text",
      },
      {
        name: "level",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "text",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Survey",
    columns: [
      {
        name: "completion_time",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "posted_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "survey_id",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "User" },
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "'1'::bigint",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "User",
    columns: [
      {
        name: "created_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "email",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "first_name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "last_name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "password",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "streak_count",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "'0'::bigint",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "WelcomeMood",
    columns: [
      {
        name: "type",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: "'nothing'::text",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
];
/** @type { import('@xata.io/client').ClientConstructor<{}> } */
const DatabaseClient = buildClient();
const defaultOptions = {
  databaseURL:
    "https://Alexandros-Tsaparas-s-workspace-k2n6ga.eu-central-1.xata.sh/db/Mood_Tracker",
};
/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */
/** @extends DatabaseClient<DatabaseSchema> */
export class XataClient extends DatabaseClient {
  constructor(options) {
    super({ ...defaultOptions, ...options }, tables);
  }
}
let instance = undefined;
/** @type { () => XataClient } */
export const getXataClient = () => {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
